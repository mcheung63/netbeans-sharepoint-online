// License : Apache License Version 2.0  https://www.apache.org/licenses/LICENSE-2.0
package com.github.quantrresearch.sharepoint.online;

import com.github.quantrresearch.sharepoint.online.dialog.SettingDialog;
import com.peterswing.CommonLib;
import hk.quantr.sharepoint.SPOnline;
import javax.swing.SwingUtilities;
import org.apache.commons.lang3.tuple.Pair;
import org.json.JSONObject;
import org.netbeans.api.keyring.Keyring;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
		dtd = "-//com.github.quantrresearch.sharepoint.online//SharePoint//EN",
		autostore = false
)
@TopComponent.Description(
		preferredID = "SharePointTopComponent",
		iconBase = "com/github/quantrresearch/sharepoint/online/sharepoint icon.png",
		persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "com.github.quantrresearch.sharepoint.online.SharePointTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
		displayName = "#CTL_SharePointAction",
		preferredID = "SharePointTopComponent"
)
@Messages({
	"CTL_SharePointAction=SharePoint",
	"CTL_SharePointTopComponent=SharePoint",
	"HINT_SharePointTopComponent=This is a SharePoint window"
})
public final class SharePointTopComponent extends TopComponent {

	SharePointTreeNode rootNode = new SharePointTreeNode("Disconnect", "disconnect", "cross");
	SharePointTreeModel treeModel = new SharePointTreeModel(rootNode);

	public SharePointTopComponent() {
		initComponents();
		setName(Bundle.CTL_SharePointTopComponent());
		setToolTipText(Bundle.HINT_SharePointTopComponent());

		initTree();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingPopupMenu = new javax.swing.JPopupMenu();
        addserverMenuItem = new javax.swing.JMenuItem();
        editServerMenuItem = new javax.swing.JMenuItem();
        deleteServerMenuItem = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        addserverMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/quantrresearch/sharepoint/online/icon/add.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(addserverMenuItem, org.openide.util.NbBundle.getMessage(SharePointTopComponent.class, "SharePointTopComponent.addserverMenuItem.text")); // NOI18N
        addserverMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addserverMenuItemActionPerformed(evt);
            }
        });
        settingPopupMenu.add(addserverMenuItem);

        editServerMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/quantrresearch/sharepoint/online/icon/pencil.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(editServerMenuItem, org.openide.util.NbBundle.getMessage(SharePointTopComponent.class, "SharePointTopComponent.editServerMenuItem.text")); // NOI18N
        editServerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editServerMenuItemActionPerformed(evt);
            }
        });
        settingPopupMenu.add(editServerMenuItem);

        deleteServerMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/quantrresearch/sharepoint/online/icon/cross.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(deleteServerMenuItem, org.openide.util.NbBundle.getMessage(SharePointTopComponent.class, "SharePointTopComponent.deleteServerMenuItem.text")); // NOI18N
        deleteServerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteServerMenuItemActionPerformed(evt);
            }
        });
        settingPopupMenu.add(deleteServerMenuItem);

        setLayout(new java.awt.BorderLayout());

        tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tree);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void treeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMouseClicked
		if (SwingUtilities.isRightMouseButton(evt)) {
			settingPopupMenu.show(tree, evt.getX(), evt.getY());
		}
    }//GEN-LAST:event_treeMouseClicked

    private void addserverMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addserverMenuItemActionPerformed
		SettingDialog settingDialog = new SettingDialog(null, true);
		settingDialog.setLocationRelativeTo(null);
		settingDialog.setVisible(true);
		if (settingDialog.isSave) {
			Keyring.save("sharepointDomain", settingDialog.domainTextField.getText().toCharArray(), null);
			Keyring.save("sharepointUsername", settingDialog.usernameTextField.getText().toCharArray(), null);
			Keyring.save("sharepointPassword", settingDialog.passwordField.getText().toCharArray(), null);
		}
    }//GEN-LAST:event_addserverMenuItemActionPerformed

    private void editServerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editServerMenuItemActionPerformed
		SettingDialog settingDialog = new SettingDialog(null, true);
		settingDialog.setLocationRelativeTo(null);
		String domain = Keyring.read("sharepointDomain") == null ? null : new String(Keyring.read("sharepointDomain"));
		String username = Keyring.read("sharepointUsername") == null ? null : new String(Keyring.read("sharepointUsername"));
		String password = Keyring.read("sharepointPassword") == null ? null : new String(Keyring.read("sharepointPassword"));
		settingDialog.domainTextField.setText(domain);
		settingDialog.usernameTextField.setText(username);
		settingDialog.passwordField.setText(password);
		settingDialog.setVisible(true);
		if (settingDialog.isSave) {
			Keyring.save("sharepointDomain", settingDialog.domainTextField.getText().toCharArray(), null);
			Keyring.save("sharepointUsername", settingDialog.usernameTextField.getText().toCharArray(), null);
			Keyring.save("sharepointPassword", settingDialog.passwordField.getText().toCharArray(), null);
		}
    }//GEN-LAST:event_editServerMenuItemActionPerformed

    private void deleteServerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteServerMenuItemActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_deleteServerMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addserverMenuItem;
    private javax.swing.JMenuItem deleteServerMenuItem;
    private javax.swing.JMenuItem editServerMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu settingPopupMenu;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables
	@Override
	public void componentOpened() {
	}

	@Override
	public void componentClosed() {
	}

	void writeProperties(java.util.Properties p) {
		p.setProperty("version", "1.0");
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
	}

	private void initTree() {
		try {
			tree.setModel(treeModel);
			tree.setCellRenderer(new SharePointTreeRenderer());
			tree.setShowsRootHandles(true);

			rootNode.add(new SharePointTreeNode("SharePoint2", "root"));
			rootNode.add(new SharePointTreeNode("SharePoint3", "root"));

			String domain = Keyring.read("sharepointDomain") == null ? null : new String(Keyring.read("sharepointDomain"));
			String username = Keyring.read("sharepointUsername") == null ? null : new String(Keyring.read("sharepointUsername"));
			String password = Keyring.read("sharepointPassword") == null ? null : new String(Keyring.read("sharepointPassword"));

			if (domain != null && username != null && password != null) {
				Pair<String, String> token = SPOnline.login(username, password, domain);
				if (token != null) {
					String jsonString = SPOnline.post(token, domain, "/_api/contextinfo", null, null);
					JSONObject json = new JSONObject(jsonString);
					jsonString = SPOnline.get(token, domain, "/_api/web");
					if (jsonString != null) {
						System.out.println(CommonLib.prettyFormatJson(jsonString));
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
}
