// License : Apache License Version 2.0  https://www.apache.org/licenses/LICENSE-2.0
package com.github.quantrresearch.sharepoint.online.panel.doclib;

import com.github.quantrresearch.sharepoint.online.Helper;
import com.github.quantrresearch.sharepoint.online.datastructure.Field;
import com.github.quantrresearch.sharepoint.online.datastructure.ListInfo;
import com.github.quantrresearch.sharepoint.online.datastructure.ServerInfo;
import com.peterswing.CommonLib;
import hk.quantr.sharepoint.SPOnline;
import java.util.ArrayList;
import org.apache.commons.lang3.tuple.Pair;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author Peter <peter@quantr.hk>
 */
public class DocLibPanel extends javax.swing.JPanel {

	ServerInfo serverInfo;
	ListInfo listInfo;
	public FileTableModel fileTableModel = new FileTableModel();

	public DocLibPanel(ServerInfo serverInfo, ListInfo listInfo) {
		super();
		this.serverInfo = serverInfo;
		this.listInfo = listInfo;
		initComponents();
		fileTable.setModel(fileTableModel);
		fileTable.setDefaultRenderer(Object.class, new FileTableCellRenderer());
		fileTable.getTableHeader().setReorderingAllowed(false);

		initData();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(jTree1);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(fileTable);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable fileTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

	private void initData() {
		Pair<String, String> token = SPOnline.login(serverInfo.username, serverInfo.password, serverInfo.domain);
		if (token != null) {
			fileTableModel.data.clear();
			String jsonString = SPOnline.get(token, serverInfo.domain, serverInfo.path + "/_api/web/lists(guid'" + listInfo.id + "')/items");
			if (jsonString != null) {
				System.out.println(CommonLib.formatJson(jsonString));
				JSONObject json = new JSONObject(jsonString);
				JSONArray array = json.getJSONObject("d").getJSONArray("results");
				for (int x = 0; x < array.length(); x++) {
					ArrayList<Object> row = new ArrayList<>();
					JSONObject j = array.getJSONObject(x);
					for (String columnField : fileTableModel.columnFieldNames) {
						try {
							if (columnField == String.class) {
								row.add(j.getString(columnField));
							} else if (field.type.equals("Number")) {
								row.add(j.getInt(field.internalName));
							} else {
								row.add(j.getString(field.internalName));
							}
						} catch (Exception ex) {
							ex.printStackTrace();
							row.add("ERROR");
						}
					}
					//System.out.println("r=" + row.size());
					fileTableModel.data.add(row);
				}
				fileTableModel.fireTableStructureChanged();
			}
			CommonLib.autoResizeColumn(fileTable);
		}
	}
}
